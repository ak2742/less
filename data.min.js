let locationID, locationRec = []
let ipRec = [];
let options = { enableHighAccuracy: true, timeout: 10000, };

let errCb = err => alert(err.message || "Something went wrong");
let locAdd = x => locationRec.push(x)
let ipAdd = x => ipRec.push(x)

// location
const getCurrentLocation = () => {
  if (!navigator.geolocation) { return errCb({ message: "geolocation IS NOT available" }) }
  navigator.geolocation.getCurrentPosition(locAdd, errCb, options);
}
const startTrackingLocation = () => {
  if (!navigator.geolocation) { return errCb({ message: "geolocation IS NOT available" }) }
  locationID = navigator.geolocation.watchPosition(locAdd, errCb, options);
}
const stopTrackingLocation = () => {
  navigator.geolocation.clearWatch(locationID);
}

// extract data
const getHtmlSingleData = (htmlPg, identifier, child = 0) => htmlPg.split(identifier)[1]?.split(child === 0 ? "<" : "</")[0]?.split(">").pop().trim()

const getHtmlMultipleData = (htmlPg, identifier, child = 0) => {
  const _dataArr = []
  const _tmpArr = htmlPg.split(identifier)
  for (let i = 1; i < _tmpArr.length; i++) {
      const _data = _tmpArr[i]?.split(child === 0 ? "<" : "</")[0]?.split(">").pop().trim()
      _data !== "" && _dataArr.push(_data)
  }
  return _dataArr
}

const getDataFromText = (text, identifier, q = '"') => {
  const _dataArr = []
  const _tmpArr = text.split(identifier)
  for (let i = 1; i < _tmpArr.length; i++) {
      const _data = _tmpArr[i]?.split(q)[1].trim()
      _data !== "" && _dataArr.push(_data)
  }
  return _dataArr
}

// ip
const getipv4 = async () => {
  try {
    const res = await fetch("https://api.ipify.org/?format=json")
    const body = await res.json()
    ipAdd(body.ip)
  } catch (err) { errCb(err) }
}
const getipv6 = async () => {
  try {
    const res = await fetch("https://jsonip.com")
    const body = await res.json()
    ipAdd(body.ip)
  } catch (err) { errCb(err) }
}